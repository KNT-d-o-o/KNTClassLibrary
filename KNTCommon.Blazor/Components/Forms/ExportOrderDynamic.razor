@using KNTCommon.Business.EventHandlers
@using KNTToolsAndAccessories
@implements IDisposable
@inject DialogService DialogService
@inject KNTCommon.Blazor.Services.HelperService Helper
@inject IIoTasksRepository IoTasksRepository
@inject KNTCommon.Blazor.Services.TimerService TimerService
@inject KNTCommon.Business.Scripts.PowerShellHelper PSHelper
@inject KNTCommon.Blazor.Services.WindowsServiceHelper WHelper
@inject KNTCommon.Business.Repositories.IParametersRepository Parameters
@inject IJSRuntime JS

@* ExportOrderDynamic *@

<div>

    <EditForm Model="@IoTasks">
        <div>
            <RadzenFieldset style="margin-bottom: 20px;">
                <RadzenRow class="RadzenRowMarginFormsSettingsRight">
                    <RadzenColumn Size="3">
                        <RadzenLabel class="labelEdit">@IoTasks.IoTaskName</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenButton class="RadzenGridButtonFormFlex rz-ripple" Text="Export" ButtonStyle="ButtonStyle.Success" Shade="Shade.Darker" Click="() => Export()" Style="height: 100%"></RadzenButton>
                    </RadzenColumn>
                    <RadzenColumn Size="6">
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenButton @ondblclick="TryTaskToContinue" class="rz-ripple headerButton" ButtonStyle="@buttonEnableDisableService" title="IO Service">@ioRunning</RadzenButton>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="RadzenRowMarginFormsSettingsRight">
                    <RadzenColumn Size="8">
                        <RadzenLabel class="labelEdit">@IoTasks.Info</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn Size="4">
                        <RadzenProgressBar class="RadzenProgressBar" @bind-Value="@ProgressValue" Visible="true" Max="100" Unit=" %" style="width: 100% !important;" ProgressBarStyle=ProgressBarStyle.Dark></RadzenProgressBar>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>
        </div>

    </EditForm>
</div>

@code {
    
    private IoTasksDTO IoTasks = new();
    ButtonStyle buttonEnableDisableService = ButtonStyle.Light;
    double ProgressValue;
    string ioRunning = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            TimerService.DataUpdated += HandleDataUpdatedExportOrder;
            TimerService.StartTimer(TimeSpan.FromSeconds(1));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async void HandleDataUpdatedExportOrder(object sender, DataUpdatedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            IoTasks = IoTasksRepository.GetIoTaskByTypeMode(4, 2);

            ProgressValue = IoTasks.Status ?? 0;

            // PLC Service running detector
            string plcStatus = WHelper.GetServiceStatus(SharedContainerCommon.iService[1]);
            switch (plcStatus)
            {
                case "Running":
                    if (Parameters.GetServiceStatus(SharedContainerCommon.iService[1]) == 2) // pending - init
                        buttonEnableDisableService = ButtonStyle.Warning;
                    else
                        buttonEnableDisableService = ButtonStyle.Success;
                    ioRunning = Tools.runningDots(ioRunning, 3);
                    break;

                case "Stopped":
                    buttonEnableDisableService = ButtonStyle.Secondary;
                    ioRunning = string.Empty;
                    break;

                case "PausePending":
                case "Paused":
                case "ContinuePending":
                case "StartPending":
                case "StopPending":
                    buttonEnableDisableService = ButtonStyle.Warning;
                    ioRunning = Tools.runningDots(ioRunning, 1);
                    break;

                default:
                    buttonEnableDisableService = ButtonStyle.Light;
                    ioRunning = string.Empty;
                    break;
            }

            StateHasChanged();
        });
    }

    public void Dispose()
    {
        TimerService.StopTimer();
        TimerService.DataUpdated -= HandleDataUpdatedExportOrder;
    }
    

    private void Export()
    {
        Helper.Notify(IoTasksRepository.IoTaskStart(IoTasks.IoTaskId));
    }

    private async Task TryTaskToContinue()
    {
        int plcStatus = Parameters.GetServiceStatus(SharedContainerCommon.iService[1]);

        if (plcStatus == 1)
            await Task.Run(() => PSHelper.StartStopService(SharedContainerCommon.iService[1], "restart"));
        else if (plcStatus == 0)
        {
            if (Parameters.UpdateServiceStatus(SharedContainerCommon.iService[1], 1))
                await Task.Run(() => PSHelper.StartStopService(SharedContainerCommon.iService[1], "start"));
        }
    }
    
}

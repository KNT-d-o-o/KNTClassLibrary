@using Microsoft.AspNetCore.Components.Forms
@inject DialogService DialogService
@inject ITablesRepository TablesRepository
@inject IParametersRepository ParametersRepository
@inject KNTCommon.Blazor.Services.HelperService Helper
@inject KNTCommon.Blazor.Services.WindowsServiceHelper WindowsServiceHelper
@inject IJSRuntime JSRuntime

@* TableDetailsDialog*@

<div class="Animation FlexContainer">

    <RadzenDataGrid Data="@Data" TItem="Dictionary<string, object>" AllowPaging="true" PageSize="@pageSize" PagerAlwaysVisible="true"
                    AllowSorting="true" AllowColumnResize="true" AllowFiltering="true" FilterMode="FilterMode.Simple"
                    ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.And" EditMode="DataGridEditMode.Single"
                    AllowVirtualization="false" @ref="ordersGrid" LoadData="@OnLoadData" Count="@totalCount"
                    style="width: 100%; height: 100%; display: flex; flex-direction: column;">

        <Columns>
            @if (ColumnNames != null)
            {
                foreach (var columnName in ColumnNames)
                {
                    var columnNameWithParams = (new List<string>() { "Leak", "LeakMax", "LeakAvg", "LeakMin", "LeakLastPoint" }.Contains(columnName)) ? Localization.Get(columnName, "") : Localization.Get(columnName);
                    <RadzenDataGridColumn TItem="Dictionary<string, object>"
                    Property="@columnName"
                    Title="@columnNameWithParams">

                        <Template Context="row">
                            @if (row.ContainsKey(columnName))
                            {
                                var value = row[columnName];
                                <p>@(value?.ToString())</p>
                            }
                        </Template> 

                        <EditTemplate Context="row">
                            @if (row.ContainsKey(columnName))
                            {
                                bool readOnly = false;
                                if (ColumnPkNames != null && ColumnPkNames.Contains(columnName))
                                    readOnly = true;
                                string value = row[columnName]?.ToString() ?? string.Empty;
                                <RadzenTextBox @bind-Value="value" Style="width: 100%;" ReadOnly="@(insertingRow == null && readOnly)"
                                Change="(args) => row[columnName] = args" />
                            }
                        </EditTemplate>
                    </RadzenDataGridColumn>
                }
            }

            <RadzenDataGridColumn Sortable="false" Width="35vw">
                <FilterTemplate>
                    <div class="Animation FixContainer">
                        <RadzenButton class="RadzenGridContextButtons rz-ripple" style="margin-right: 8px" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Light" Icon="refresh" Click="() => OnRefreshClick()" Size="ButtonSize.Large" title=@Localization.Get("ButtonRefresh")></RadzenButton>

                        @if (!SharedContainerCommon.IsOldArchiveDatabase)
                        {
                            <RadzenButton class="RadzenGridContextButtons rz-ripple" style="margin-right: 8px" Variant="Variant.Filled" Shade="Shade.Dark" ButtonStyle="ButtonStyle.Success" Icon="add" Click="() => AddNewRow(null)" Size="ButtonSize.Large" title="Add"></RadzenButton>
                        }
                        <RadzenButton class="RadzenGridContextButtons rz-ripple" Icon="grid_on" Click="ExportTableXls" ButtonStyle="@ButtonStyle.Info" Shade="Shade.Darker" Size="ButtonSize.Large" title="Export XLS grid" Variant="Variant.Filled"></RadzenButton>
                        <RadzenButton class="RadzenGridContextButtons rz-ripple" style="margin-right: 8px" Icon="grid_on" Click="ExportTableXlsAll" ButtonStyle="@ButtonStyle.Secondary" Shade="Shade.Darker" Size="ButtonSize.Large" title="Export XLS all" Variant="Variant.Filled"></RadzenButton>
                        @if (!SharedContainerCommon.IsOldArchiveDatabase)
                        {
                            <RadzenButton class="RadzenGridContextButtons rz-ripple" title="Export SQL grid" Icon="database" Click="ExportTableSql" ButtonStyle="@ButtonStyle.Info" Shade="Shade.Darker" Size="ButtonSize.Large" Variant="Variant.Filled"></RadzenButton>
                            <RadzenButton class="RadzenGridContextButtons rz-ripple" title="Export SQL all" Icon="database" Click="ExportTableSqlAll" ButtonStyle="@ButtonStyle.Secondary" Shade="Shade.Darker" Size="ButtonSize.Large" Variant="Variant.Filled"></RadzenButton>
                        }
                    </div>
                </FilterTemplate>
                <Template Context="row">
                    @if (!SharedContainerCommon.IsOldArchiveDatabase)
                    {
                       <div>
                            <RadzenButton Click="() => EditRow(row)" class="RadzenGridContextButtons rz-ripple" Icon="@((editingRow == row || insertingRow == row) ? "close" : "edit")" ButtonStyle="ButtonStyle.Secondary" Variant="Variant.Filled" Shade="Shade.Darker" Size="ButtonSize.Large" title="Edit"></RadzenButton>
                            <RadzenButton Click="() => DeleteDbRow(row)" class="RadzenGridContextButtons rz-ripple" Icon="delete_forever" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Filled" Shade="Shade.Darker" Size="ButtonSize.Large" title="Delete"></RadzenButton>
                            <RadzenButton Click="@((editingRow == row || insertingRow == row) ? () => UpdateDbRow(row) : () => AddNewRow(row))" class="RadzenGridContextButtons rz-ripple" Icon="@((editingRow == row || insertingRow == row) ? "save" : "library_add")" ButtonStyle="ButtonStyle.Success" Variant="Variant.Filled" Shade="Shade.Dark" Size="ButtonSize.Large" title="Copy"></RadzenButton>
                        </div> 
                    }                    
                </Template>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>
    @if (isLoading)
    {
        <div class="spinner-overlay">
            <div class="spinner"></div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? TableName { get; set; }

    private IEnumerable<Dictionary<string, object>>? Data;
    private List<string>? ColumnNames;
    private List<string>? ColumnPkNames;

    bool isLoading = false;
    int totalCount;
    int pageSize = 1000;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            pageSize = Convert.ToInt32(ParametersRepository.GetParametersStr("largeTableLimit"));
        }
        catch { }

        await LoadData();
        await base.OnInitializedAsync();
    }

    private async Task LoadData()
    {
        isLoading = true;

        if (TableName != null)
            (Data, ColumnNames, ColumnPkNames, totalCount) = await TablesRepository.GetDataFromTableAsync(
                TableName, 
                new Dictionary<string, object>(), 
                string.Empty,
                skip: 0,
                take: pageSize);
        
        isLoading = false;
    }

    private LoadDataArgs? lastLoadDataArgs;
    private async Task OnLoadData(LoadDataArgs args)
    {
        isLoading = true;

        lastLoadDataArgs = args;

        Dictionary<string, object> filterArray = new();
        foreach (FilterDescriptor filter in args.Filters)
        {
            filterArray.Add(filter.Property, filter.FilterValue);
        }

        if (TableName != null)
            (Data, ColumnNames, ColumnPkNames, totalCount) = await TablesRepository.GetDataFromTableAsync(
                TableName,
                filterArray,
                args.OrderBy,
                skip: args.Skip ?? 0,
                take: args.Top ?? pageSize);

        isLoading = false;
    }

    private async Task OnRefreshClick()
    {
        if (lastLoadDataArgs is null)
            await LoadData();
        else
            await OnLoadData(lastLoadDataArgs);
    }

    Dictionary<string, object>? insertingRow;
    private async Task AddNewRow(Dictionary<string, object>? row)
    {
        if (row != null)
            originalRowValues = new Dictionary<string, object>(row);
        else
            originalRowValues = null;

        row = new Dictionary<string, object>();

        // check columns
        if (ColumnNames != null && ColumnNames.Any())
        {
            foreach (var column in ColumnNames)
            {
                if (!row.ContainsKey(column)) // add keys
                {
                    row[column] = originalRowValues?.ContainsKey(column) == true
                        ? originalRowValues[column]
                        : string.Empty;
                }
            }
        }

        if (insertingRow == row)
        {
            insertingRow = null;
        }
        else
        {
            editingRow = null;
            insertingRow = row;
            await ordersGrid.InsertRow(row);
        }
    }

    RadzenDataGrid<Dictionary<string, object>> ordersGrid = new();
    Dictionary<string, object>? editingRow;
    Dictionary<string, object>? originalRowValues;
    // update data
    async Task EditRow(Dictionary<string, object> row)
    {
        if (editingRow == row)
        {
            // cancel edit
            await ordersGrid.UpdateRow(row);
            editingRow = null;
            originalRowValues = null;
            if (lastLoadDataArgs is null)
                await LoadData();
            else
                await OnLoadData(lastLoadDataArgs);
        }
        else
        {
            insertingRow = null;
            originalRowValues = new Dictionary<string, object>(row);
            editingRow = row; //current row
            await ordersGrid.EditRow(row); // start edit
        }
    }

    async Task UpdateDbRow(Dictionary<string, object> row)
    {
        if (editingRow == row)
        {
            // save changes
            await ordersGrid.UpdateRow(row);
            if (TableName != null)
            {
                bool ret = TablesRepository.UpdateTableRow(TableName, row, ColumnPkNames);
                Helper.Notify(ret);

                if (!ret)
                {
                    if (lastLoadDataArgs is null)
                        await LoadData();
                    else
                        await OnLoadData(lastLoadDataArgs);
                }
            }
            editingRow = null; // stop edit
        }
        else if (insertingRow == row)
        {
            // save new
            await ordersGrid.UpdateRow(row);
            if (TableName != null)
            {
                bool ret = TablesRepository.InsertTableRow(TableName, row);
                Helper.Notify(ret);

                if (!ret)
                {
                    if (lastLoadDataArgs is null)
                        await LoadData();
                    else
                        await OnLoadData(lastLoadDataArgs);
                }
            }
            insertingRow = null; // stop edit
        }
    }

    // delete
    async Task DeleteDbRow(Dictionary<string, object> row)
    {
        if (TableName != null)
        {
            string parStr = string.Empty;

            if (ColumnPkNames != null)
            {
                int i = 0;
                foreach (string pk in ColumnPkNames)
                {
                    if (i > 0)
                        parStr += ",\n";
                    parStr += pk + ": " + row[pk];
                    i++;
                }
            }

            var result = await DialogService.OpenAsync<ConfirmationDialog>
                ("", Helper.CreateDialogBlazorComponentParameters("action", "Delete", "details", parStr, "weight", 2),
                Helper.GetDialogOptions("ConfirmationWrapper"));
            if (result == true)
            {
                bool ret = TablesRepository.DeleteTableRow(TableName, row, ColumnPkNames);
                Helper.Notify(ret);

                if (lastLoadDataArgs is null)
                    await LoadData();
                else
                    await OnLoadData(lastLoadDataArgs);
            }
        }
    }

    public async Task ExportTableXls()
    {
        if (TableName is null)
            return;

        var result = await DialogService.OpenAsync<ConfirmationDialog>
                ("", Helper.CreateDialogBlazorComponentParameters("action", "Export Excel Grid", "details", TableName, "weight", 0),
                Helper.GetDialogOptions("ConfirmationWrapper"));
        if (result == true)
        {
            if (Data is not null && Data.Any())
            {
                Helper.Notify(await WindowsServiceHelper.ExportToExcel(JSRuntime, Data?.ToList() ?? new(), TableName ?? "table"));
            }
        }
    }

    public async Task ExportTableXlsAll()
    {
        if (TableName is null)
            return;

        var result = await DialogService.OpenAsync<ConfirmationDialog>(
            "", Helper.CreateDialogBlazorComponentParameters("action", "Export Excel All", "details", TableName, "weight", 0),
            Helper.GetDialogOptions("ConfirmationWrapper"));

        if (result == true)
        {
            // Load all rows from DB
            var allData = await WindowsServiceHelper.LoadEntireTableAsync(TableName);
            if (allData != null && allData.Any())
            {
                Helper.Notify(await WindowsServiceHelper.ExportToExcel(JSRuntime, allData.ToList(), TableName));
            }
        } 
    }

    public async Task ExportTableSqlAll()
    {
        if (TableName is null)
            return;

        var result = await DialogService.OpenAsync<ConfirmationDialog>
                ("", Helper.CreateDialogBlazorComponentParameters("action", "Export SQL All", "details", $"{TableName} -> {WindowsServiceHelper.GetDumpPath(TableName, string.Empty)}", "weight", 0),
                Helper.GetDialogOptions("ConfirmationWrapper"));
        if (result == true)
        {
            Helper.Notify(await WindowsServiceHelper.GenerateSQLDump(TableName, string.Empty));
        }
    }

    public async Task ExportTableSql()
    {
        if (TableName is null)
            return;

        var result = await DialogService.OpenAsync<ConfirmationDialog>
                ("", Helper.CreateDialogBlazorComponentParameters("action", "Export SQL Grid", "details", $"{TableName} -> {WindowsServiceHelper.GetDumpPath(TableName, string.Empty)}", "weight", 0),
                Helper.GetDialogOptions("ConfirmationWrapper"));
        if (result == true)
        {
            if (Data is not null && Data.Any())
            {
                Helper.Notify(await WindowsServiceHelper.GenerateSQLDumpFromData(TableName, "_filtered", Data.ToList()));
            }
        }
    }

}

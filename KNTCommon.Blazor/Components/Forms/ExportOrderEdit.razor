@using KNTCommon.Business.EventHandlers
@using KNTToolsAndAccessories
@inject DialogService DialogService
@inject KNTCommon.Blazor.Services.HelperService Helper
@inject IIoTasksRepository IoTasksRepository
@inject KNTCommon.Blazor.Services.TimerService TimerService
@inject KNTCommon.Business.Scripts.PowerShellHelper PSHelper
@inject KNTCommon.Blazor.Services.WindowsServiceHelper WHelper
@inject KNTCommon.Business.Repositories.IParametersRepository Parameters
@inject IJSRuntime JS

@* ExportOrderEdit *@

<div class="Animation">

    <ExportOrderDynamic Type="@Type"></ExportOrderDynamic>

    <EditForm Model="@IoTasks">
        <div>
            <RadzenFieldset style="margin-bottom: 20px;">

                <RadzenRow>
                    <RadzenColumn Size="3">
                        <RadzenLabel class="labelEdit">Condition</RadzenLabel>
                    </RadzenColumn>

                    <RadzenColumn Size="2">
                        <RadzenLabel class="labelEdit">Number</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenSwitch TValue="bool" @bind-Value=@numberSelect Change=@NumberSelect Style="margin:1vh"></RadzenSwitch>
                    </RadzenColumn>

                    <RadzenColumn Size="2">
                        <RadzenLabel class="labelEdit">Date</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenSwitch TValue="bool" @bind-Value=@dateSelect Change=@DateSelect Style="margin:1vh"></RadzenSwitch>
                    </RadzenColumn>

                 </RadzenRow>
                 <RadzenRow>

                    <RadzenColumn Size="3">
                    </RadzenColumn>
                    <RadzenColumn Size="3">
                        @if (numberSelect)
                        {
                            <RadzenLabel class="labelEdit">Measure number</RadzenLabel>
                        }
                        else
                        {
                            <RadzenLabel class="labelEdit">Measure date</RadzenLabel>
                        }
                    </RadzenColumn>

                    <RadzenColumn Size="1">
                        <RadzenDropDown 
                            Data="@findConditions" 
                            TValue="string" 
                            Value="@condition" 
                            Change="@setCondition"
                            class="dropdown" />
                    </RadzenColumn>
                    <RadzenColumn Size="3">
                        @if (numberSelect)
                        {
                            <NumericInput CSSId="CalibrationEditNumericInput" InputValue="@conditionVal" ReturnedValue="setConditionVal" Style="height: 100%"></NumericInput>
                        }
                        else
                        {
                            <RadzenDatePicker class="custom-datepicker" @bind-Value="@selectedDate" ShowTime="true" HoursStep="1" MinutesStep="1" DateFormat="dd.MM.yyyy HH:mm" Change="OnDateChange" />
                        }
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow>
                    <RadzenColumn Size="3">
                    </RadzenColumn>
                    <RadzenColumn Size="2">
                        <RadzenLabel class="labelEdit">and</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn Size="1">
                        <RadzenSwitch TValue="bool" @bind-Value=@andSelect Change=@AndSelect Style="margin:1vh"></RadzenSwitch>
                    </RadzenColumn>

                    <RadzenColumn Size="1">
                        <RadzenDropDown Data="@findConditions"
                                        TValue="string"
                                        Value="@condition2"
                                        Change="@setCondition2"
                                        class="dropdown" 
                                        Visible="@andSelect"/>
                    </RadzenColumn>
                    <RadzenColumn Size="3">
                        @if (numberSelect)
                        {
                            <NumericInput CSSId="CalibrationEditNumericInput" InputValue="@conditionVal2" ReturnedValue="setConditionVal2" Style="height: 100%" Hidden="@(!andSelect)"></NumericInput>
                        }
                        else
                        {
                            <RadzenDatePicker class="custom-datepicker" @bind-Value="@selectedDate2" ShowTime="true" HoursStep="1" MinutesStep="1" DateFormat="dd.MM.yyyy HH:mm" Change="OnDateChange2" Visible="@andSelect" />
                        }
                    </RadzenColumn>

                </RadzenRow>

                @if (Type == 4)
                {
                    <RadzenRow>
                        <RadzenColumn Size="3">
                            <RadzenLabel class="labelEdit">Compress to ZIP</RadzenLabel>
                        </RadzenColumn>
                        <RadzenColumn Size="9">
                            <RadzenSwitch TValue="bool" @bind-Value=@zip Change=@ZipChange Style="margin:1vh"></RadzenSwitch>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow>
                        <RadzenColumn Size="3">
                            <RadzenLabel class="labelEdit">Dump all</RadzenLabel>
                        </RadzenColumn>
                        <RadzenColumn Size="9">
                            <RadzenSwitch TValue="bool" @bind-Value=@dumpAll Change=@DumpAllChange Style="margin:1vh"></RadzenSwitch>
                        </RadzenColumn>
                    </RadzenRow>
                }

                <RadzenRow>
                    <RadzenColumn Size="3">
                        <RadzenLabel class="labelEdit">Export location</RadzenLabel>
                    </RadzenColumn>
                    <RadzenColumn Size="9">
                        <RadzenLabel class="labelEdit">@IoTasks.Par1</RadzenLabel>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenFieldset>
        </div>

    </EditForm>
</div>

@code {
    [Parameter]
    public int Type { get; set; }

    string numberCriteriaField = string.Empty;
    string dateCriteriaField = string.Empty;

    private IoTasksDTO IoTasks = new();
    private IoTaskDetailsDTO IoTaskDetails_0 = new();
    double ProgressValue;
    ButtonStyle buttonEnableDisableService = ButtonStyle.Light;
    string ioRunning = string.Empty;
    string[] par1Array = { };
    bool zip = false;
    bool dumpAll = false;
    static string[] findConditions = { "=", "<", ">", "<=", ">=" };
    string conditionName = string.Empty;
    string? condition = findConditions[0];
    string? condition2 = findConditions[0];
    string conditionVal = string.Empty;
    string conditionVal2 = string.Empty;
    bool numberSelect = true;
    bool dateSelect = false;
    bool andSelect = false;
    private DateTime? selectedDate;
    private DateTime? selectedDate2;

    protected override void OnInitialized()
    {
        string[] exportCriteriaFields = Parameters.GetParametersStr("exportCriteriaFields").Split('|');
        numberCriteriaField = exportCriteriaFields[0];
        dateCriteriaField = exportCriteriaFields[1];
        LoadData();
        base.OnInitialized();
    }

    private void LoadData()
    {
        InvokeAsync(() =>
        {
            IoTasks = IoTasksRepository.GetIoTaskByTypeMode(Type, 2);

            IoTaskDetails_0 = IoTasksRepository.GetIoTaskDetails(IoTasks.IoTaskId, true).First();

            ProgressValue = IoTasks.Status ?? 0;

            // condition
            if (IoTaskDetails_0.Par3 != null)
            {
                string[] pars = IoTaskDetails_0.Par3.Split(new[] { " AND " }, StringSplitOptions.None);

                // // parsing match - first condition
                var match = Regex.Match(pars[0], @"^(\w+)\s*(>=|<=|>|<|=)\s*'?(.*?)'?$");
                if (match.Success)
                {
                    conditionName = match.Groups[1].Value;
                    condition = match.Groups[2].Value;

                    if (conditionName == numberCriteriaField)
                    {
                        numberSelect = true;
                        dateSelect = false;
                        conditionVal = match.Groups[3].Value;
                    }
                    else if (conditionName == dateCriteriaField)
                    {
                        numberSelect = false;
                        dateSelect = true;

                        if (DateTime.TryParse(match.Groups[3].Value, out var parsedDate))
                            selectedDate = parsedDate;
                    }
                }

                // // parsing match - second condition
                if (pars.Length > 1)
                {
                    match = Regex.Match(pars[1], @"^(\w+)\s*(>=|<=|>|<|=)\s*'?(.*?)'?$");
                    if (match.Success)
                    {
                        condition2 = match.Groups[2].Value;

                        if (conditionName == numberCriteriaField)
                            conditionVal2 = match.Groups[3].Value;
                        else if (conditionName == dateCriteriaField)
                        {
                            if (DateTime.TryParse(match.Groups[3].Value, out var parsedDate))
                                selectedDate2 = parsedDate;
                        }
                    }
                    andSelect = true;
                }
                else
                    andSelect = false;
            }

            // dump all
            if (IoTaskDetails_0.Par5 != null)
            {
                if (IoTaskDetails_0.Par5.ToLower() == "getall")
                    dumpAll = true;
                else
                    dumpAll = false;
            }

            // zip boolean flag
            if (IoTasks.Par1 != null)
                par1Array = (IoTasks.Par1).Split(';');
            if (par1Array.Length <= 1)
                zip = false;
            else if (par1Array[1].ToLower() == "zip")
                zip = true;
            else
                zip = false;

            StateHasChanged();
        });
    }

    // set number condition 1
    private void setConditionVal(object value)
    {
        if (value != null && int.TryParse(value.ToString(), out int measNumCond))
        {
            conditionVal = measNumCond.ToString();
            SetNumberConditions();
        }
    }

    // set number condition 2
    private void setConditionVal2(object value)
    {
        if (value != null && int.TryParse(value.ToString(), out int measNumCond))
        {
            conditionVal2 = measNumCond.ToString();
            SetNumberConditions();
        }
    }

    // set condition 1
    private void setCondition(object value)
    {
        condition = value?.ToString();

        if (numberSelect)
            SetNumberConditions();
        else if (dateSelect)
            SetDateConditions();
    }

    // set condition 2
    private void setCondition2(object value)
    {
        condition2 = value?.ToString();

        if (numberSelect)
            SetNumberConditions();
        else if (dateSelect)
            SetDateConditions();
    }

    // set and
    void AndSelect(bool value)
    {
        if (numberSelect)
            SetNumberConditions();
        else if (dateSelect)
            SetDateConditions();
    }

    private void SetNumberConditions()
    {
        // set number condition 1
        if (conditionVal != null && int.TryParse(conditionVal.ToString(), out int measNumCond))
        {
            string completeCondition = $"{conditionName}{condition}{conditionVal}";

            // set number condition 2
            if (andSelect)
            {
                if (andSelect && (conditionVal2 != null && int.TryParse(conditionVal2.ToString(), out measNumCond)))
                {
                    completeCondition += $" AND {conditionName}{condition2}{conditionVal2}";
                    Helper.Notify(IoTasksRepository.IoTaskSetPar3(IoTasks.IoTaskId, 1, completeCondition));
                    LoadData();
                }
            }
            else
            {
                Helper.Notify(IoTasksRepository.IoTaskSetPar3(IoTasks.IoTaskId, 1, completeCondition));
                LoadData();
            }
        }
    
    }

    private void OnDateChange(DateTime? value)
    {
        selectedDate = value;
        SetDateConditions();
    }

    private void OnDateChange2(DateTime? value)
    {
        selectedDate2 = value;
        SetDateConditions();
    }

    private void SetDateConditions()
    {
        // set date condition 1
        if (selectedDate != null)
        {
            string completeCondition = $"{conditionName}{condition}'{(selectedDate ?? DateTime.Now).ToString("yyyy-MM-dd HH:mm")}'";

            // set date condition 2
            if (andSelect)
            {
                if (selectedDate2 != null)
                {
                    completeCondition += $" AND {conditionName}{condition2}'{(selectedDate2 ?? DateTime.Now).ToString("yyyy-MM-dd HH:mm")}'";
                    Helper.Notify(IoTasksRepository.IoTaskSetPar3(IoTasks.IoTaskId, 1, completeCondition));
                    LoadData();
                }
            }
            else
            {
                Helper.Notify(IoTasksRepository.IoTaskSetPar3(IoTasks.IoTaskId, 1, completeCondition));
                LoadData();
            }
        }
    }

    private void Export()
    {
        Helper.Notify(IoTasksRepository.IoTaskStart(IoTasks.IoTaskId));
    }

    void ZipChange(bool toZip)
    {
        string pathToPar1 = par1Array[0];
        if (toZip)
            pathToPar1 += ";zip";

        Helper.Notify(IoTasksRepository.IoTaskSetPar1(IoTasks.IoTaskId, pathToPar1));
        LoadData();
    }

    void DumpAllChange(bool toDumpAll)
    {
        string parString = "getOnlyDefined";
        if (toDumpAll)
            parString = "getAll";
        Helper.Notify(IoTasksRepository.IoTaskSetPar5(IoTasks.IoTaskId, 1, parString));

        LoadData();
    }

    void NumberSelect(bool value)
    {
        if (value)
        {
            dateSelect = false;
            conditionName = numberCriteriaField;
            SetNumberConditions();
        }
        else
        {
            dateSelect = true;
            conditionName = dateCriteriaField;
            SetDateConditions();
        }
    }

    void DateSelect(bool value)
    {
        if (value)
        {
            numberSelect = false;
            conditionName = dateCriteriaField;
            SetDateConditions();
        }
        else
        {
            conditionName = numberCriteriaField;
            numberSelect = true;
            SetNumberConditions();
        }
    }

}

@using KNTCommon.Data.Models
@inject DialogService DialogService
@inject HelperService Helper
@inject AuthenticationStateProvider AuthStateProvider
@inject IAuthenticationRepository AuthRepo
@inject IUsersAndGroupsRepository UsersRepo

@* CredentialsCommonComponent *@

<div class="CredentialsComponentWrapper">
    <RadzenStack id="RadzenCredentialsStack">
        <RadzenFieldset>
            <EditForm Model="@User" OnSubmit="ConfirmCredentials">
                <RadzenRow Class="rz-p-0 rz-p-lg-4">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenStack Gap="1rem">

                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <div @ondblclick="ClickOnNameTitle">
                                        <RadzenLabel Style="margin-top:1.5vh;"><h3><span style="color:whitesmoke;">Username</span></h3></RadzenLabel>
                                    </div>
                                </RadzenColumn>

                                <RadzenColumn Size="12" SizeMD="8">
                                    <RadzenDropDown @bind-Value=@User.UserName Data=@usernames Name="DropDownEdit" Change="@ReturnUsernameDropdown">
                                        <ValueTemplate Context="item">
                                            <AlphanumericInput LabelTitle="Edit Username" InputValue="@User.UserName" ReturnedValue="ReturnUsername"></AlphanumericInput>
                                        </ValueTemplate>
                                    </RadzenDropDown>
                                </RadzenColumn>

                            </RadzenRow>

                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <div @ondblclick="ClickOnPasswdTitle">
                                    <RadzenLabel Style="margin-top:1.5vh;"><h3><span style="color:whitesmoke;">Password</span></h3></RadzenLabel>
                                    </div>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <AlphanumericInput LabelTitle="Edit Password" InputValue="@User.Password" ReturnedValue="ReturnPassword" IsPassword="true"></AlphanumericInput>
                                </RadzenColumn>
                            </RadzenRow>

                            @*fstaa
                            <RadzenRow>
                                <RadzenColumn Size="12" SizeMD="4">
                                    <RadzenLabel Style="margin-top:1.5vh;"><h3><span style="color:whitesmoke;">DB Password</span></h3></RadzenLabel>
                                </RadzenColumn>
                                <RadzenColumn Size="12" SizeMD="8">
                                    <AlphanumericInput LabelTitle="Edit Password" ReturnedValue="ReturnDbPassword" IsPassword="true"></AlphanumericInput>
                                </RadzenColumn>
                            </RadzenRow> 
                            *@

                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
                <br />
                <RadzenStack AlignItems="AlignItems.End">
                    <RadzenButton Click="ConfirmCredentials" class="RadzenGridAddButtonForm rz-ripple" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Shade="Shade.Darker">Login</RadzenButton>
                </RadzenStack>

            </EditForm>
        </RadzenFieldset>
    </RadzenStack>
</div>

@code {
    // [CascadingParameter]
    // public Task<AuthenticationState>? AuthTask { get; set; }

    public UserCredentialsDTO User = new();
    /*  private ClaimsPrincipal user; */

    IEnumerable<string>? usernames;

    protected override async Task OnInitializedAsync()
    {
        // if(AuthTask != null)
        // {
        //     var authState = await AuthTask;
        //     this.user = authState.User;
        // }

        usernames = UsersRepo.GetAllUserNames(true);
        await base.OnInitializedAsync();
    }

    private void ConfirmCredentials()
    {
        if (User.UserName != null && User.Password != null)
        {
            if (AuthRepo.Login(User.UserName, User.Password))
            {
                var user = UsersRepo.GetUserByUsername(User.UserName);
                // AuthStateProvider.Login(user);
                // ((AuthStateProvider)AuthStateProvider).Login(user);
                DialogService.Close(user);
            }
            else
            {
                //gesla se ne ujemajo
            }
        }
        else
        {
            //vpisi ime in geslo
        }


    }

    private void ReturnUsernameDropdown(object value)
    {
        if(value != null)
            User.UserName = value.ToString() ?? string.Empty;
    }

    private void ReturnUsername(string? username)
    {
        if (username != null)
            User.UserName = username;
    }

    private void ReturnPassword(string? password)
    {
        if (password != null)
            User.Password = password;
    }

    /*fstaa DB passwd
    private void ReturnDbPassword(string? plainTextPassword)
    {
        if (plainTextPassword != null)
        {
            var encryptedPassword = PManager.EncryptPassword(plainTextPassword);
            File.WriteAllText("password.txt", encryptedPassword);
            }
        }*/

    int uidAdmin = 0;
    UserDTO? userAdmin;
    /// <summary>
    /// Find admin users on double click
    /// </summary>
    private void ClickOnNameTitle()
    {
        userAdmin = UsersRepo.GetAdminUserNext(uidAdmin);
        if (userAdmin is null)
        {
            uidAdmin = 0;
            userAdmin = UsersRepo.GetAdminUserNext(uidAdmin);
        }
        if (userAdmin is null)
            return;
        string? uidName = userAdmin.UserName;
        if (uidName != null)
            User.UserName = uidName;
        uidAdmin = userAdmin.UsersId;
    }

    /// <summary>
    /// Set default passwd on double click
    /// </summary>
    private void ClickOnPasswdTitle()
    {
        bool ret = false;
        if (userAdmin != null)
            ret = AuthRepo.SetDefaultPasswd(userAdmin.UsersId);
        Helper.Notify(ret);
    }

}

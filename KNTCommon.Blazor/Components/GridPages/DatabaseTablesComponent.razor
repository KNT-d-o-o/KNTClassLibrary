
@inject DialogService DialogService
@inject ITablesRepository TablesRepository
@inject KNTCommon.Blazor.Services.HelperService Helper
@inject KNTCommon.Blazor.Services.WindowsServiceHelper WindowsServiceHelper

@* DatabaseTablesComponent *@

<div class="ScrollableOuterDiv Animation">

    <div class="Animation" style="width: 100%; height: 68vh">
        <RadzenDataGrid Data="@Tables" TItem="string" ColumnWidth="200px" EmptyText=@Localization.Get("RadzenDataGridColumn_EmptyText")
        AllowAlternatingRows="false"
        AllowSorting="true" AllowColumnResize="true" PagerHorizontalAlign="HorizontalAlign.Left"
        EditMode="DataGridEditMode.Single" style="height: 100%"
        >
            <Columns>
                <RadzenDataGridColumn TItem="string" Property="." Title="@Localization.Get("LabelTableName")">
                    <Template Context="table">
                        <span @onclick="(() => OnCellClick(table))" style="cursor: pointer;">@table</span>
                    </Template>
                </RadzenDataGridColumn>
                @if (!SharedContainerCommon.IsOldArchiveDatabase)
                {
                    <RadzenDataGridColumn TItem="string" Property="." Title="SQL" Width="10%">
                        <Template Context="table">
                            <RadzenButton class="RadzenGridContextButtons rz-ripple" title="Import" Icon="database" Click="() => OnSql(table)" ButtonStyle="@ButtonStyle.Info" Shade="Shade.Darker" Size="ButtonSize.Large" />
                        </Template>
                    </RadzenDataGridColumn>
                }

            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code {
    private List<string> Tables { get; set; } = new();
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;

        try
        {
            Tables = await TablesRepository.GetDatabaseTablesAsync();

            if (SharedContainerCommon.IsOldArchiveDatabase)
            {
                var displayTables = new List<string>() { "transactions","transactiondetails","transactiondetailslog","transactionslog","leaktestermeasurementsdetails",
                                                         "leaktestermeasurementsdetailslog","leaktestermeasurements","leaktestermeasurementslog",
                                                         "heliummeasurement","heliummeasuredpoints",
                                                         "forcepath","forcepathdetails","forcepathwindows",
                                                         "dimensionsmeasurements"};
                Tables = Tables.Where(x => displayTables.Contains(x)).ToList();
            }

        }
        catch (Exception ex)
        {
            // Logiranje ali obravnava napak
            Console.WriteLine(ex.Message);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnCellClick(string tableName)
    {
        var param = Helper.CreateDialogBlazorComponentParameters("TableName", tableName);
        var result = await DialogService.OpenAsync<TableDetailsDialog>(Localization.Get(nameof(TableDetailsDialog), tableName), param, Helper.GetDialogOptions("MaxSizeWindow"));

    }

    private async Task OnSql(string tableName)
    {
        string filepath = WindowsServiceHelper.GetDumpPath(tableName, string.Empty);
        var result = await DialogService.OpenAsync<ConfirmationDialog>
                ("", Helper.CreateDialogBlazorComponentParameters("action", "Import SQL", "details", $"{filepath} -> {tableName}", "weight", 1),
                Helper.GetDialogOptions("ConfirmationWrapper"));
        if (result == true)
        {
            if (await WindowsServiceHelper.GenerateSQLDump(tableName, DateTime.Now.ToString("yyyyMMddHHmmss")))
                Helper.Notify(await TablesRepository.ExecuteSqlFromFile(filepath));
        }
    }


}

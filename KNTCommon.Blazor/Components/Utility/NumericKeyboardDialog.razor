@inject DialogService dialogService
@inject IJSRuntime JSRuntime

<div class="numericKeyboardWrapper Animation">
    <RadzenTextBox id="RadzenTextboxNDialog"
                   @bind-Value="@Value"
                   @onkeydown="SearchInputKeyDown"
                   @onblur="@(async () => await GetCursorIndexAsync())">
    </RadzenTextBox>
    <br />
    <br />
    <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
        <div class="numericKeyboard">
            <table>
                <tr>
                    <td><button id="num7" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("1"))'>1</button></td>
                    <td><button id="num8" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("2"))'>2</button></td>
                    <td><button id="num9" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("3"))'>3</button></td>
                </tr>
                <tr>
                    <td><button id="num4" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("4"))'>4</button></td>
                    <td><button id="num5" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("5"))'>5</button></td>
                    <td><button id="num6" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("6"))'>6</button></td>
                    <td><button id="enterNumeric" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("Enter"))'><RadzenIcon Icon="done" IconColor="@Colors.Success" class="large-icon"></RadzenIcon></button></td>
                </tr>
                <tr>
                    <td><button id="num3" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("7"))'>7</button></td>
                    <td><button id="num2" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("8"))'>8</button></td>
                    <td><button id="num1" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("9"))'>9</button></td>
                    <td><button id="Backspace" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("Backspace"))'><RadzenIcon Icon="west" IconColor="@Colors.Warning" class="large-icon"></RadzenIcon></button></td>
                </tr>
                <tr>
                    <td><div style="@(AllowDecimal ? "" : "visibility: hidden")"><button id="comma" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue(CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator))'>@CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator</button></div></td>
                    <td><button id="num0" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("0"))'>0</button></td>
                    <td> <div style="@(AllowNegative ? "" : "visibility: hidden")"><button id="minus" class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("-"))'>-</button></div></td>
                    <button id="Clear" keyboardButtonLarge class="keyboardButton keyboardButtonLarge rz-ripple" @onclick='(() => GetButtonValue("Clear"))'><RadzenIcon Icon="close" IconColor="@Colors.Danger" class="large-icon"></RadzenIcon></button>
                </tr>
            </table>
        </div>
    </RadzenStack>
</div>

@code {
    [Parameter]
    public string? InputValue { get; set; }

    [Parameter]
    public string? LabelValue { get; set; }

    [Parameter]
    public bool AllowNegative { get; set; }

    [Parameter]
    public bool AllowDecimal { get; set; }

    private string? Value { get; set; } = string.Empty;
    int? cursorIndex = 0;

    protected override void OnInitialized()
    {
        if (InputValue != null)
        {
            Value = InputValue;
        }
    }

    private async Task GetCursorIndexAsync()
    {
        cursorIndex = await JSRuntime.InvokeAsync<int>("getCaretPosition", "RadzenTextboxNDialog");
    }

    private async void GetButtonValue(string input)
    {
        if (input == "Enter")
        {
            dialogService.Close(Value);
        }
        if (input != null)
        {
            int strLen = (Value ?? string.Empty).Length;

            Value = KeyboardUtilities.ParseKeyboardInputForNumericKeyboard(input, Value, cursorIndex);
            int strLenDiff = (Value ?? string.Empty).Length - strLen;
            if (strLenDiff >= 0 || (strLenDiff < 0 && cursorIndex >= (strLenDiff * -1)))
            {
                cursorIndex += strLenDiff;
            }
            else
            {
                cursorIndex = 0;
            }
        }
        else
        {
            //error?
        }

        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("setFocusAndCursor", "RadzenTextboxANDialog", cursorIndex);
    }

    private async Task SearchInputKeyDown(KeyboardEventArgs e)
    {
        await GetCursorIndexAsync();
        var decimalSeparator = CultureInfo.CurrentCulture.NumberFormat.NumberDecimalSeparator;

        switch (e.Key)
        {
            case "Enter":
                GetButtonValue("Enter");
                break;
            case "Backspace":
                cursorIndex++;
                GetButtonValue("Backspace");
                break;
            case ".":
            case ",":
                if (AllowDecimal && (e.Key == decimalSeparator || e.Key == "." || e.Key == ","))
                {
                    GetButtonValue(decimalSeparator);
                }
                break;
            case "-":
                if (AllowNegative)
                {
                    GetButtonValue("-");
                }
                break;
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
                GetButtonValue(e.Key);
                break;
        }
    }
}

@inject DialogService dialogService
@inject HelperService Helper

<RadzenTextBox Value="@InputValue" @onclick="OpenKeyboard" id="@CSSId" class="defaultNumericInput" Placeholder="@Placeholder" @onkeydown="OpenKeyboard" ReadOnly="@ReadOnly" Style="@Style" Visible="@(!Hidden)"></RadzenTextBox>

@code {
    [Parameter]
    public string? InputValue { get; set; }

    [Parameter]
    public bool AllowNegative { get; set; } = true;

    [Parameter]
    public bool AllowDecimal { get; set; } = true;

    [Parameter]
    public double? MinValue { get; set; }

    [Parameter]
    public double? MaxValue { get; set; }

    [Parameter]
    public string? LabelTitle { get; set; }

    [Parameter]
    public string? CSSId { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string? Style { get; set; }

    [Parameter]
    public EventCallback<string> ReturnedValue { get; set; }

    [Parameter]
    public bool Hidden { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    async Task OpenKeyboard()
    {
        if (ReadOnly)
            return;
        if (InputValue is null)
            InputValue = string.Empty;

        var result = await dialogService.OpenAsync<NumericKeyboardDialog>
        (LabelTitle, Helper.CreateDialogBlazorComponentParameters(nameof(NumericKeyboardDialog.InputValue), InputValue, nameof(NumericKeyboardDialog.AllowNegative), AllowNegative, nameof(NumericKeyboardDialog.AllowDecimal), AllowDecimal), Helper.GetDialogOptions("NumericKeyboardOptions halfSizeWindow"));
        if (result != null)
        {
            var InputValuePrev = InputValue;
            InputValue = result.ToString();

            double val;
            if (double.TryParse(InputValue, out val))
            {
                if (MaxValue is not null && val > MaxValue)
                    InputValue = MaxValue.ToString();
                if (MinValue is not null && val < MinValue)
                    InputValue = MinValue.ToString();
            }
            else
            {
                InputValue = InputValuePrev;
                return;
            }

            await ReturnedValue.InvokeAsync(InputValue);
        }
    }
}
